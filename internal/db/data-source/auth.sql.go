// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package dataSource

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auths (user_id, password) VALUES ($1, $2)
RETURNING created_at, updated_at, id
`

type CreateAuthParams struct {
	UserID   uuid.UUID
	Password string
}

type CreateAuthRow struct {
	CreatedAt time.Time
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (CreateAuthRow, error) {
	row := q.db.QueryRow(ctx, createAuth, arg.UserID, arg.Password)
	var i CreateAuthRow
	err := row.Scan(&i.CreatedAt, &i.UpdatedAt, &i.ID)
	return i, err
}

const getUserAuth = `-- name: GetUserAuth :one
SELECT id, password, user_id, created_at, updated_at FROM auths WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserAuth(ctx context.Context, userID uuid.UUID) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserAuth, userID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Password,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserAuth = `-- name: UpdateUserAuth :exec
UPDATE auths SET password = $1, updated_at = $2 WHERE user_id = $3
`

type UpdateUserAuthParams struct {
	Password  string
	UpdatedAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) UpdateUserAuth(ctx context.Context, arg UpdateUserAuthParams) error {
	_, err := q.db.Exec(ctx, updateUserAuth, arg.Password, arg.UpdatedAt, arg.UserID)
	return err
}
